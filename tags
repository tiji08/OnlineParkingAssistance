!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC=c++ -g -Wall -Werror $/;"	m
CFLAGS	Makefile	/^CFLAGS=-I$(IDIR)$/;"	m
DEPS	Makefile	/^DEPS = $(patsubst %,$(IDIR)\/%,$(_DEPS))$/;"	m
GRAPH_FAIL	include/graph.h	/^    GRAPH_FAIL$/;"	e	enum:_erronum
GRAPH_H	include/graph.h	2;"	d
GRAPH_SUCCESS	include/graph.h	/^    GRAPH_SUCCESS,$/;"	e	enum:_erronum
GetFromQ	src/qstack.cpp	/^void * GetFromQ() {$/;"	f
IDIR	Makefile	/^IDIR =.\/include$/;"	m
INCLIBS	Makefile	/^INCLIBS=-lpthread$/;"	m
InsertInQ	src/qstack.cpp	/^void InsertInQ(void *data) {$/;"	f
MAX	msc/client.c	11;"	d	file:
MAX	src/server.cpp	51;"	d	file:
MAX_FRIENDS	include/graph.h	12;"	d
MAX_NUM_OF_TRIE	src/trie.cpp	3;"	d	file:
MAX_THREADS	src/server.cpp	66;"	d	file:
NAME_SIZE	include/graph.h	11;"	d
OBJ	Makefile	/^OBJ = $(patsubst %,$(ODIR)\/%,$(_OBJ))$/;"	m
ODIR	Makefile	/^ODIR=.\/src$/;"	m
PORT	msc/client.c	12;"	d	file:
PORT	src/server.cpp	57;"	d	file:
Queue	include/qstack.h	/^struct Queue {$/;"	s
SA	msc/client.c	13;"	d	file:
SA	src/server.cpp	58;"	d	file:
SRCDIR	Makefile	/^SRCDIR=.\/src$/;"	m
StackNode	include/qstack.h	/^struct StackNode$/;"	s
TRIE_H	include/trie.h	2;"	d
ThreadPool	src/server.cpp	/^    ThreadPool() {$/;"	f	class:ThreadPool
ThreadPool	src/server.cpp	/^class ThreadPool {$/;"	c	file:
_DEPS	Makefile	/^_DEPS = graph.h trie.h qstack.h$/;"	m
_OBJ	Makefile	/^_OBJ = server.o graph.o trie.o main.o qstack.o$/;"	m
__GSTACK_H__	include/qstack.h	5;"	d
_erronum	include/graph.h	/^typedef enum _erronum {$/;"	g
add_account	src/graph.cpp	/^erronum add_account (int index, const char *name) {$/;"	f
add_friend	src/graph.cpp	/^erronum add_friend (int index, const char *name, const char *friend_name) {$/;"	f
all_accounts	src/trie.cpp	/^char all_accounts[1024*10];$/;"	v
buff	src/server.cpp	/^    char buff[MAX];$/;"	v
collect_accounts	src/trie.cpp	/^int collect_accounts;$/;"	v
collect_list_of_accoutns	src/trie.cpp	/^void collect_list_of_accoutns() {$/;"	f
connfd	src/server.cpp	/^    int connfd = (int)pconnfd;$/;"	v
connfd	src/server.cpp	/^int connfd;$/;"	v
data	include/qstack.h	/^    void *data;$/;"	m	struct:Queue
data	include/qstack.h	/^    void *data;$/;"	m	struct:StackNode
delete_account	src/graph.cpp	/^erronum delete_account (int index, const char *name) {$/;"	f
delete_friend	src/graph.cpp	/^erronum delete_friend (int index, const char *name, const char *friend_name) {$/;"	f
delete_friends_list	src/trie.cpp	/^static void delete_friends_list(struct node *account) {$/;"	f	file:
delete_node	src/trie.cpp	/^int delete_node(int index, const char *iname) {$/;"	f
destroyQ	src/qstack.cpp	/^void destroyQ() {$/;"	f
destroyStack	src/qstack.cpp	/^void destroyStack() {$/;"	f
destroy_trietree	src/trie.cpp	/^void destroy_trietree(int index)$/;"	f
display_all	src/trie.cpp	/^void display_all(struct node *root) {$/;"	f
display_all_accounts	src/graph.cpp	/^erronum display_all_accounts (int index) {$/;"	f
display_all_friends	src/graph.cpp	/^erronum display_all_friends (int index, const char *name) {$/;"	f
display_all_nodes	src/trie.cpp	/^void display_all_nodes(int index) {$/;"	f
erronum	include/graph.h	/^}erronum;$/;"	t	typeref:enum:_erronum
find_friend	src/graph.cpp	/^erronum find_friend (int index,const char *name, const char *friend_name) {$/;"	f
friends	include/graph.h	/^    char *friends[MAX_FRIENDS];$/;"	m	struct:node
frontQ	src/qstack.cpp	/^static struct Queue *frontQ = NULL;$/;"	v	typeref:struct:Queue	file:
func	msc/client.c	/^void func(int sockfd)$/;"	f
g_head	src/trie.cpp	/^struct node g_head;$/;"	v	typeref:struct:node
ga_head	src/trie.cpp	/^struct node *ga_head[MAX_NUM_OF_TRIE];$/;"	v	typeref:struct:node
gcombs	src/get_id.cpp	/^char *gcombs;$/;"	v
gcombs_len	src/get_id.cpp	/^int gcombs_len;$/;"	v
gen_seq	src/get_id.cpp	/^void gen_seq(char *combs, int len) {$/;"	f
get_base2	src/get_id.cpp	/^int get_base2(int num) {$/;"	f
get_list_of_accoutns	src/trie.cpp	/^char *get_list_of_accoutns() {$/;"	f
gpos	src/get_id.cpp	/^int gpos;$/;"	v
gtop	src/trie.cpp	/^int gtop = -1;$/;"	v
handle_connection	src/server.cpp	/^    void handle_connection(int connfd) {$/;"	f	class:ThreadPool
head	src/trie.cpp	/^struct node *head = &g_head;$/;"	v	typeref:struct:node
inc_ref_count	src/trie.cpp	/^void inc_ref_count(int index, char *name) {$/;"	f
init_trietree	src/trie.cpp	/^int init_trietree() {$/;"	f
insert	src/trie.cpp	/^int insert (int index, const char *iname) {$/;"	f
insertInStack	src/qstack.cpp	/^void insertInStack(void *data)$/;"	f
key	src/get_id.cpp	/^char *key;$/;"	v
key_len	src/get_id.cpp	/^int key_len;$/;"	v
list	include/graph.h	/^    struct node *list[26];$/;"	m	struct:node	typeref:struct:node::node
main	msc/client.c	/^int main()$/;"	f
main	src/get_id.cpp	/^int main()$/;"	f
main	src/main.cpp	/^int main()$/;"	f
make_daytime_string	src/server.cpp	/^std::string make_daytime_string() {$/;"	f
mut	src/server.cpp	/^    pthread_mutex_t mut;$/;"	m	class:ThreadPool	file:
name	include/graph.h	/^    char *name;$/;"	m	struct:node
next	include/qstack.h	/^    struct Queue *next;$/;"	m	struct:Queue	typeref:struct:Queue::Queue
next	include/qstack.h	/^    struct StackNode *next;$/;"	m	struct:StackNode	typeref:struct:StackNode::StackNode
node	include/graph.h	/^struct node {$/;"	s
offset	src/trie.cpp	/^int offset;$/;"	v
pool	src/server.cpp	/^    pthread_t pool[MAX_THREADS];$/;"	m	class:ThreadPool	file:
pool_fun_def	src/server.cpp	/^void *pool_fun_def(void *ptr) {$/;"	f
popFromStack	src/qstack.cpp	/^void* popFromStack()$/;"	f
poss	src/get_id.cpp	/^char *poss;$/;"	v
power_to	src/get_id.cpp	/^long power_to(long base, long power) {$/;"	f
prev	include/qstack.h	/^    struct StackNode *prev;$/;"	m	struct:StackNode	typeref:struct:StackNode::StackNode
rearQ	src/qstack.cpp	/^static struct Queue *rearQ = NULL;$/;"	v	typeref:struct:Queue	file:
ref_count	include/graph.h	/^    int ref_count;$/;"	m	struct:node
run_loop	src/server.cpp	/^    int run_loop(){$/;"	f	class:ThreadPool
search	src/trie.cpp	/^struct node * search(int index, const char *name) {$/;"	f
serach_account	src/graph.cpp	/^erronum serach_account(int index, const char *name) {$/;"	f
sockfd	src/server.cpp	/^    int sockfd;$/;"	m	struct:thread_fun_data	file:
sockfds	src/server.cpp	/^    std::vector<int> sockfds;$/;"	m	class:ThreadPool	file:
start_tcp_server	src/server.cpp	/^int start_tcp_server(void) {$/;"	f
sub_key	src/get_id.cpp	/^int sub_key(int pos) {$/;"	f
suggest_friend	src/graph.cpp	/^erronum suggest_friend(int index, const char *name) {$/;"	f
test_trie	src/trie.cpp	/^int test_trie()$/;"	f
thread_fun_data	src/server.cpp	/^struct thread_fun_data {$/;"	s	file:
top	src/qstack.cpp	/^static struct StackNode *top = NULL;$/;"	v	typeref:struct:StackNode	file:
